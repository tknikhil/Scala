[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\nithin\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\nithin\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_152)
[debug]       Load.loadUnit: plugins took 187.9366ms
[debug]       Load.loadUnit: defsScala took 0.7754ms
[debug] [Loading] Scanning directory C:\Users\nithin\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nithin\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 34.6616 ms
[debug]           Load.resolveProject(global-plugins) took 90.3875ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\nithin\.sbt\1.0\plugins, plugins: List(<none>))) took 173.8823ms
[debug] [Loading] Done in C:\Users\nithin\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 211.3188ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5245ms
[debug]     Load.loadUnit(file:/C:/Users/nithin/.sbt/1.0/plugins/, ...) took 417.4658ms
[debug]   Load.apply: load took 683.7563ms
[debug]   Load.apply: resolveProjects took 8.6229ms
[debug]   Load.apply: finalTransforms took 80.228ms
[debug]   Load.apply: config.delegates took 12.1726ms
[debug]   Load.apply: Def.make(settings)... took 659.6062ms
[debug]   Load.apply: structureIndex took 186.8568ms
[debug]   Load.apply: mkStreams took 2.5887ms
[info] loading global plugins from C:\Users\nithin\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 8522.9877ms
[debug]           Load.loadUnit: plugins took 35.8272ms
[debug]           Load.loadUnit: defsScala took 0.0056ms
[debug] [Loading] Scanning directory E:\scala_intelij\Scala_project\sbt_databaseConnector\project
[debug]             Load.loadUnit: mkEval took 57.1043ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\scala_intelij\Scala_project\sbt_databaseConnector\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.6058 ms
[info] loading settings for project sbt_databaseconnector-build from idea.sbt ...
[debug]               Load.resolveProject(sbt_databaseconnector-build) took 19.8793ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sbt_databaseconnector-build, base: E:\scala_intelij\Scala_project\sbt_databaseConnector\project, plugins: List(<none>))) took 23.1608ms
[debug] [Loading] Done in E:\scala_intelij\Scala_project\sbt_databaseConnector\project, returning: (sbt_databaseconnector-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3409.2849ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.6298ms
[debug]         Load.loadUnit(file:/E:/scala_intelij/Scala_project/sbt_databaseConnector/project/, ...) took 3451.0175ms
[debug]       Load.apply: load took 3452.3481ms
[debug]       Load.apply: resolveProjects took 0.1362ms
[debug]       Load.apply: finalTransforms took 11.6519ms
[debug]       Load.apply: config.delegates took 0.4581ms
[debug]       Load.apply: Def.make(settings)... took 94.6511ms
[debug]       Load.apply: structureIndex took 30.4628ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from E:\scala_intelij\Scala_project\sbt_databaseConnector\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 8385.7062ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory E:\scala_intelij\Scala_project\sbt_databaseConnector
[debug]       Load.loadUnit: mkEval took 0.2457ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.4149 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 35.1697ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: E:\scala_intelij\Scala_project\sbt_databaseConnector, plugins: List(<none>))) took 40.016ms
[debug] [Loading] Done in E:\scala_intelij\Scala_project\sbt_databaseConnector, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3029.2995ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.1145ms
[debug]   Load.loadUnit(file:/E:/scala_intelij/Scala_project/sbt_databaseConnector/, ...) took 11430.3841ms
[debug] Load.apply: load took 11431.9088ms
[debug] Load.apply: resolveProjects took 0.1605ms
[debug] Load.apply: finalTransforms took 28.6119ms
[debug] Load.apply: config.delegates took 0.2462ms
[debug] Load.apply: Def.make(settings)... took 98.1179ms
[debug] Load.apply: structureIndex took 28.7776ms
[debug] Load.apply: mkStreams took 0.0037ms
[info] set current project to sbt_databaseConnector (in build file:/E:/scala_intelij/Scala_project/sbt_databaseConnector/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63027 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63027, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to sbt_databaseConnector (in build file:/E:/scala_intelij/Scala_project/sbt_databaseConnector/)
[debug] > Exec(idea-shell, None, None)
